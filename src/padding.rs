/// Description:
/// Does PKCS7 padding to a multiple of 16.
///
/// Arguments:
/// text - (I,REQ) - A string of hexadecimals where each digit is padded to length 2
///
/// Returns:
/// The padded text
#[allow(non_snake_case)]
pub fn PKCS7_padding(text: Vec<u8>) -> Vec<u8> {
    let n = text.len();
    let padding = 16 - n % 16;
    let mut padded_string: Vec<u8> = Vec::with_capacity(n+padding);
    padded_string.extend(text);
    for _ in 0..padding {
        padded_string.push(padding as u8);
    }

    padded_string
}

/// Description:
/// Unpads a string padded to a multiple of 16 with PKCS7.
///
/// Arguments:
/// text - (I,REQ) - A padded string of hexadecimals where each digit is padded to length 2
///
/// Returns:
/// The unpadded text
#[allow(non_snake_case)]
pub fn PKCS7_unpadding(text: Vec<u8>) -> Vec<u8> {
    let n = text.len();
    let padding = text[n-1] as usize;

    text[0..(n-padding)].to_vec()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    #[allow(non_snake_case)]
    fn PKCS7_padding_test() {
        let s = vec![0x00, 0x3F, 0x24, 0xF6, 0xD2, 0x57, 0x05, 0x92, 0xA4, 0x5E, 0xEA];
        let res = PKCS7_padding(s);
        let actual = vec![0x00, 0x3F, 0x24, 0xF6, 0xD2, 0x57, 0x05, 0x92, 0xA4, 0x5E, 0xEA, 0x05, 0x05, 0x05, 0x05, 0x05];
        assert_eq!(res, actual);

        let s = vec![0x00, 0x3F, 0x24, 0xF6, 0xD2, 0x57, 0x05, 0x92, 0xA4, 0x5E, 0xEA, 0x05, 0x05, 0x05, 0x05, 0x05];
        let res = PKCS7_padding(s);
        let actual = vec![0x00, 0x3F, 0x24, 0xF6, 0xD2, 0x57, 0x05, 0x92, 0xA4, 0x5E, 0xEA, 0x05, 0x05, 0x05, 0x05, 0x05, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10];
        assert_eq!(res, actual);
    }

    #[test]
    #[allow(non_snake_case)]
    fn PKCS7_unpadding_test() {
        let s = vec![0x00, 0x3F, 0x24, 0xF6, 0xD2, 0x57, 0x05, 0x92, 0xA4, 0x5E, 0xEA, 0x05, 0x05, 0x05, 0x05, 0x05];
        let res = PKCS7_unpadding(s);
        let actual = vec![0x00, 0x3F, 0x24, 0xF6, 0xD2, 0x57, 0x05, 0x92, 0xA4, 0x5E, 0xEA];
        assert_eq!(res, actual);

        let s = vec![0x00, 0x3F, 0x24, 0xF6, 0xD2, 0x57, 0x05, 0x92, 0xA4, 0x5E, 0xEA, 0x05, 0x05, 0x05, 0x05, 0x05, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10];
        let res = PKCS7_unpadding(s);
        let actual = vec![0x00, 0x3F, 0x24, 0xF6, 0xD2, 0x57, 0x05, 0x92, 0xA4, 0x5E, 0xEA, 0x05, 0x05, 0x05, 0x05, 0x05];
        assert_eq!(res, actual);
    }
}