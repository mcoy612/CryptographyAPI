use crate::math::{byte_inverse,byte_remainder,AES_IRREDUCIBLE_POLYNOMIAL};

use std::io::{self, Write};

pub const RCON: [u32; 10] = [0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
pub const SBOX: [u8; 256] = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x1, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x4, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x5, 0x9a, 0x7, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x9, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x0, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x2, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0xc, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0xb, 0xdb, 0xe0, 0x32, 0x3a, 0xa, 0x49, 0x6, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x8, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x3, 0xf6, 0xe, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0xd, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0xf, 0xb0, 0x54, 0xbb, 0x16];

/// Description:
/// Generate SBOX to speed up sub_bytes computation
#[allow(dead_code)]
pub fn generate_s_box() {
    let inverse = 0;
    print!("0x{:x}, ", inverse ^ circular_left_bit_shift(inverse, 1) ^ circular_left_bit_shift(inverse, 2) ^ circular_left_bit_shift(inverse, 3) ^ circular_left_bit_shift(inverse, 4) ^ 0x63);
    for i in 1..=255 {
        let inverse = byte_inverse(i);
        print!("0x{:x}, ", inverse ^ circular_left_bit_shift(inverse, 1) ^ circular_left_bit_shift(inverse, 2) ^ circular_left_bit_shift(inverse, 3) ^ circular_left_bit_shift(inverse, 4) ^ 0x63);
    }
    io::stdout().flush().unwrap();
}

/// Description:
/// Generate RCON to speed up key_schedule
#[allow(dead_code)]
pub fn generate_r_con() {
    print!("0x{:x}, ", 1);
    for i in 1..10 {
        print!("0x{:x}, ", byte_remainder(1 << i, AES_IRREDUCIBLE_POLYNOMIAL));
    }
    io::stdout().flush().unwrap();
}

/// Description:
/// Shifts a byte to the left in a circular manner (rather than << which cuts it off)
///
/// Arguments:
/// a - (I,REQ) - byte to shift
/// shift - (I,REQ) - offset to shift by
///
/// Returns:
/// shifted byte
#[allow(dead_code)]
pub fn circular_left_bit_shift(a: u8, shift: u8) -> u8 {
    let shift = shift % 8;
    a << shift ^ a >> (8-shift)
}

/// Description:
/// Rotates word by 1 byte to the left in circular manner.
///
/// Arguments:
/// word - (I,REQ) - The word to rotate
///
/// Returns:
/// Rotatetd word
pub fn rot_word(word: u32) -> u32 {
    word << 8 ^ word >> 24
}

/// Description:
/// Applies sub_bytes to each byte in the word.
///
/// Arguments:
/// word - (I,REQ) - The word to substitue
///
/// Returns:
/// The transformed word
pub fn sub_word(word: u32) -> u32 {
    let mut res: u32 = 0;
    for i in 0..4 {
        res ^= (SBOX[(word >> (8*i) & 0b_1111_1111) as usize] as u32) << (8*i);
    }

    res
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn circular_left_bit_shift_test() {
        let a: u8 = 0b_0011_1011;
        let shift = 3;
        let res = circular_left_bit_shift(a,shift);
        let actual = 0b_1101_1001;
        assert_eq!(res, actual);

        let a: u8 = 0b_0011_1011;
        let shift = 1;
        let res = circular_left_bit_shift(a,shift);
        let actual = 0b_0111_0110;
        assert_eq!(res, actual);
    }

    #[test]
    fn rot_word_test() {
        let a: u32 = 0b_1001_1101_0010_0000_0010_1111_0101_0111;
        let res = rot_word(a);
        let actual = 0b_0010_0000_0010_1111_0101_0111_1001_1101;
        assert_eq!(res, actual)
    }

    #[test]
    fn sub_word_test() {
        let a: u32 = 0x_9D_20_2F_57;
        let res = sub_word(a);
        let actual = 0x_5E_B7_15_5B;
        assert_eq!(res, actual)
    }
}